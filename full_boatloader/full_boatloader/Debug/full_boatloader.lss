
full_boatloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000488  00003800  00003800  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010d  00800060  00800060  000004fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f95  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098b  00000000  00000000  000015d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000945  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000028a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e1  00000000  00000000  00002a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d4  00000000  00000000  00002fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000034c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003800 <__vectors>:
    3800:	0c 94 2a 1c 	jmp	0x3854	; 0x3854 <__ctors_end>
    3804:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3808:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    380c:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3810:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3814:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3818:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    381c:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3820:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3824:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3828:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    382c:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3830:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3834:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3838:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    383c:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3840:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3844:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3848:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    384c:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3850:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>

00003854 <__ctors_end>:
    3854:	11 24       	eor	r1, r1
    3856:	1f be       	out	0x3f, r1	; 63
    3858:	cf e5       	ldi	r28, 0x5F	; 95
    385a:	d4 e0       	ldi	r29, 0x04	; 4
    385c:	de bf       	out	0x3e, r29	; 62
    385e:	cd bf       	out	0x3d, r28	; 61

00003860 <__do_copy_data>:
    3860:	10 e0       	ldi	r17, 0x00	; 0
    3862:	a0 e6       	ldi	r26, 0x60	; 96
    3864:	b0 e0       	ldi	r27, 0x00	; 0
    3866:	e8 e8       	ldi	r30, 0x88	; 136
    3868:	fc e3       	ldi	r31, 0x3C	; 60
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <__do_copy_data+0x10>
    386c:	05 90       	lpm	r0, Z+
    386e:	0d 92       	st	X+, r0
    3870:	a0 36       	cpi	r26, 0x60	; 96
    3872:	b1 07       	cpc	r27, r17
    3874:	d9 f7       	brne	.-10     	; 0x386c <__do_copy_data+0xc>

00003876 <__do_clear_bss>:
    3876:	21 e0       	ldi	r18, 0x01	; 1
    3878:	a0 e6       	ldi	r26, 0x60	; 96
    387a:	b0 e0       	ldi	r27, 0x00	; 0
    387c:	01 c0       	rjmp	.+2      	; 0x3880 <.do_clear_bss_start>

0000387e <.do_clear_bss_loop>:
    387e:	1d 92       	st	X+, r1

00003880 <.do_clear_bss_start>:
    3880:	ad 36       	cpi	r26, 0x6D	; 109
    3882:	b2 07       	cpc	r27, r18
    3884:	e1 f7       	brne	.-8      	; 0x387e <.do_clear_bss_loop>
    3886:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <main>
    388a:	0c 94 42 1e 	jmp	0x3c84	; 0x3c84 <_exit>

0000388e <__bad_interrupt>:
    388e:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <__vectors>

00003892 <boot_program_page>:
{
	static unsigned short add_x=0;
	EEPROM_write(add_x,download_state);
}
void boot_program_page(uint16_t page , uint8_t *buf)
{
    3892:	cf 93       	push	r28
    3894:	df 93       	push	r29
	uint16_t sreg = SREG;
    3896:	5f b7       	in	r21, 0x3f	; 63
	cli();
    3898:	f8 94       	cli
	uint32_t address;
	address=page*PAGE_SIZE;
    389a:	96 95       	lsr	r25
    389c:	98 2f       	mov	r25, r24
    389e:	88 27       	eor	r24, r24
    38a0:	97 95       	ror	r25
    38a2:	87 95       	ror	r24
	boot_page_erase_safe(address);
    38a4:	07 b6       	in	r0, 0x37	; 55
    38a6:	00 fc       	sbrc	r0, 0
    38a8:	fd cf       	rjmp	.-6      	; 0x38a4 <boot_program_page+0x12>
    38aa:	e1 99       	sbic	0x1c, 1	; 28
    38ac:	fe cf       	rjmp	.-4      	; 0x38aa <boot_program_page+0x18>
    38ae:	23 e0       	ldi	r18, 0x03	; 3
    38b0:	fc 01       	movw	r30, r24
    38b2:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
    38b6:	e8 95       	spm
    38b8:	db 01       	movw	r26, r22
	uint16_t word;
	for (uint8_t i=0;i<PAGE_SIZE;i+=2)
    38ba:	40 e0       	ldi	r20, 0x00	; 0
	{
		word=*buf;
		buf++;
		word+= (*buf++)<<8;
		boot_page_fill_safe(address+i,word);
    38bc:	61 e0       	ldi	r22, 0x01	; 1
    38be:	ec 01       	movw	r28, r24
    38c0:	ca 1b       	sub	r28, r26
    38c2:	db 0b       	sbc	r29, r27
	address=page*PAGE_SIZE;
	boot_page_erase_safe(address);
	uint16_t word;
	for (uint8_t i=0;i<PAGE_SIZE;i+=2)
	{
		word=*buf;
    38c4:	7c 91       	ld	r23, X
		buf++;
		word+= (*buf++)<<8;
    38c6:	11 96       	adiw	r26, 0x01	; 1
    38c8:	2c 91       	ld	r18, X
    38ca:	11 97       	sbiw	r26, 0x01	; 1
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	32 2f       	mov	r19, r18
    38d0:	22 27       	eor	r18, r18
    38d2:	27 0f       	add	r18, r23
    38d4:	31 1d       	adc	r19, r1
		boot_page_fill_safe(address+i,word);
    38d6:	07 b6       	in	r0, 0x37	; 55
    38d8:	00 fc       	sbrc	r0, 0
    38da:	fd cf       	rjmp	.-6      	; 0x38d6 <boot_program_page+0x44>
    38dc:	e1 99       	sbic	0x1c, 1	; 28
    38de:	fe cf       	rjmp	.-4      	; 0x38dc <boot_program_page+0x4a>
    38e0:	fe 01       	movw	r30, r28
    38e2:	ea 0f       	add	r30, r26
    38e4:	fb 1f       	adc	r31, r27
    38e6:	09 01       	movw	r0, r18
    38e8:	60 93 57 00 	sts	0x0057, r22	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
    38ec:	e8 95       	spm
    38ee:	11 24       	eor	r1, r1
	cli();
	uint32_t address;
	address=page*PAGE_SIZE;
	boot_page_erase_safe(address);
	uint16_t word;
	for (uint8_t i=0;i<PAGE_SIZE;i+=2)
    38f0:	4e 5f       	subi	r20, 0xFE	; 254
    38f2:	12 96       	adiw	r26, 0x02	; 2
    38f4:	40 38       	cpi	r20, 0x80	; 128
    38f6:	31 f7       	brne	.-52     	; 0x38c4 <boot_program_page+0x32>
		word=*buf;
		buf++;
		word+= (*buf++)<<8;
		boot_page_fill_safe(address+i,word);
	}
	boot_page_write_safe(address);
    38f8:	07 b6       	in	r0, 0x37	; 55
    38fa:	00 fc       	sbrc	r0, 0
    38fc:	fd cf       	rjmp	.-6      	; 0x38f8 <boot_program_page+0x66>
    38fe:	e1 99       	sbic	0x1c, 1	; 28
    3900:	fe cf       	rjmp	.-4      	; 0x38fe <boot_program_page+0x6c>
    3902:	25 e0       	ldi	r18, 0x05	; 5
    3904:	fc 01       	movw	r30, r24
    3906:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
    390a:	e8 95       	spm
	boot_rww_enable_safe();
    390c:	07 b6       	in	r0, 0x37	; 55
    390e:	00 fc       	sbrc	r0, 0
    3910:	fd cf       	rjmp	.-6      	; 0x390c <boot_program_page+0x7a>
    3912:	e1 99       	sbic	0x1c, 1	; 28
    3914:	fe cf       	rjmp	.-4      	; 0x3912 <boot_program_page+0x80>
    3916:	81 e1       	ldi	r24, 0x11	; 17
    3918:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
    391c:	e8 95       	spm
	SREG=sreg;
    391e:	5f bf       	out	0x3f, r21	; 63
}
    3920:	df 91       	pop	r29
    3922:	cf 91       	pop	r28
    3924:	08 95       	ret

00003926 <CRC_CHECK_FLASH>:


uint8_t CRC_CHECK_FLASH(uint16_t start,uint16_t end_,uint16_t crc)
{
    3926:	da 01       	movw	r26, r20
	uint16_t address , CRC_16=0XFFFF;uint8_t byte;
    3928:	2f ef       	ldi	r18, 0xFF	; 255
    392a:	3f ef       	ldi	r19, 0xFF	; 255
	for (address=start;address<end_;address++)
    392c:	86 17       	cp	r24, r22
    392e:	97 07       	cpc	r25, r23
    3930:	d8 f4       	brcc	.+54     	; 0x3968 <CRC_CHECK_FLASH+0x42>
	{
		byte=pgm_read_byte(address);
    3932:	fc 01       	movw	r30, r24
    3934:	54 91       	lpm	r21, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    3936:	25 27       	eor	r18, r21
    3938:	52 2f       	mov	r21, r18
    393a:	52 95       	swap	r21
    393c:	52 27       	eor	r21, r18
    393e:	05 2e       	mov	r0, r21
    3940:	56 95       	lsr	r21
    3942:	56 95       	lsr	r21
    3944:	50 25       	eor	r21, r0
    3946:	05 2e       	mov	r0, r21
    3948:	56 95       	lsr	r21
    394a:	50 25       	eor	r21, r0
    394c:	57 70       	andi	r21, 0x07	; 7
    394e:	02 2e       	mov	r0, r18
    3950:	23 2f       	mov	r18, r19
    3952:	56 95       	lsr	r21
    3954:	07 94       	ror	r0
    3956:	57 95       	ror	r21
    3958:	30 2d       	mov	r19, r0
    395a:	25 27       	eor	r18, r21
    395c:	06 94       	lsr	r0
    395e:	57 95       	ror	r21
    3960:	30 25       	eor	r19, r0
    3962:	25 27       	eor	r18, r21


uint8_t CRC_CHECK_FLASH(uint16_t start,uint16_t end_,uint16_t crc)
{
	uint16_t address , CRC_16=0XFFFF;uint8_t byte;
	for (address=start;address<end_;address++)
    3964:	01 96       	adiw	r24, 0x01	; 1
    3966:	e2 cf       	rjmp	.-60     	; 0x392c <CRC_CHECK_FLASH+0x6>
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	2a 17       	cp	r18, r26
    396c:	3b 07       	cpc	r19, r27
    396e:	09 f0       	breq	.+2      	; 0x3972 <CRC_CHECK_FLASH+0x4c>
    3970:	80 e0       	ldi	r24, 0x00	; 0
		byte=pgm_read_byte(address);
		CRC_16=_crc16_update(CRC_16,byte);
	}
	if(crc == CRC_16)return 1;
	else return 0;
}
    3972:	08 95       	ret

00003974 <Flash_MainTask>:
void Flash_MainTask(void)
{
	static uint8_t page_number=0;
	static uint16_t code_size=0 , recevied_code=0;
	uint8_t req_valid=False;
	if (IS_REQUEST==True)
    3974:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <IS_REQUEST>
    3978:	81 30       	cpi	r24, 0x01	; 1
    397a:	09 f0       	breq	.+2      	; 0x397e <Flash_MainTask+0xa>
    397c:	cc c0       	rjmp	.+408    	; 0x3b16 <Flash_MainTask+0x1a2>
	{
		switch (Req_ID)
    397e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Req_ID>
    3982:	84 33       	cpi	r24, 0x34	; 52
    3984:	39 f1       	breq	.+78     	; 0x39d4 <Flash_MainTask+0x60>
    3986:	30 f4       	brcc	.+12     	; 0x3994 <Flash_MainTask+0x20>
    3988:	80 31       	cpi	r24, 0x10	; 16
    398a:	59 f0       	breq	.+22     	; 0x39a2 <Flash_MainTask+0x2e>
    398c:	81 33       	cpi	r24, 0x31	; 49
    398e:	09 f4       	brne	.+2      	; 0x3992 <Flash_MainTask+0x1e>
    3990:	89 c0       	rjmp	.+274    	; 0x3aa4 <Flash_MainTask+0x130>
    3992:	ba c0       	rjmp	.+372    	; 0x3b08 <Flash_MainTask+0x194>
    3994:	86 33       	cpi	r24, 0x36	; 54
    3996:	09 f4       	brne	.+2      	; 0x399a <Flash_MainTask+0x26>
    3998:	40 c0       	rjmp	.+128    	; 0x3a1a <Flash_MainTask+0xa6>
    399a:	87 33       	cpi	r24, 0x37	; 55
    399c:	09 f4       	brne	.+2      	; 0x39a0 <Flash_MainTask+0x2c>
    399e:	6c c0       	rjmp	.+216    	; 0x3a78 <Flash_MainTask+0x104>
    39a0:	b3 c0       	rjmp	.+358    	; 0x3b08 <Flash_MainTask+0x194>
		{
			case SESSION_CONTROL:
			{
				SET_BIT(PORTA,0);
    39a2:	d8 9a       	sbi	0x1b, 0	; 27
				if (Req_Data[0]==PROGRAMMING_SESSION && Req_len==2 && download_state==waiting_ProgrammingSession)
    39a4:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <Req_Data>
    39a8:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <Req_Data+0x1>
    39ac:	80 81       	ld	r24, Z
    39ae:	83 30       	cpi	r24, 0x03	; 3
    39b0:	b1 f4       	brne	.+44     	; 0x39de <Flash_MainTask+0x6a>
    39b2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Req_len>
    39b6:	82 30       	cpi	r24, 0x02	; 2
    39b8:	91 f4       	brne	.+36     	; 0x39de <Flash_MainTask+0x6a>
    39ba:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <download_state>
    39be:	81 11       	cpse	r24, r1
    39c0:	0e c0       	rjmp	.+28     	; 0x39de <Flash_MainTask+0x6a>
				{
					Response_positive();
    39c2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Req_ID>
    39c6:	80 5c       	subi	r24, 0xC0	; 192
    39c8:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <UART_SEND_CHAR>
					download_state++;
    39cc:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <download_state>
    39d0:	8f 5f       	subi	r24, 0xFF	; 255
    39d2:	20 c0       	rjmp	.+64     	; 0x3a14 <Flash_MainTask+0xa0>
				}
			}break;
			
			case DOWNLOAD_REQUEST:
			{
				SET_BIT(PORTA,1);
    39d4:	d9 9a       	sbi	0x1b, 1	; 27
				if (download_state==waiting_DownloadRequest && Req_len==3 )
    39d6:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <download_state>
    39da:	81 30       	cpi	r24, 0x01	; 1
    39dc:	21 f0       	breq	.+8      	; 0x39e6 <Flash_MainTask+0x72>
					download_state++;
				}
				else
				{
					download_state==waiting_ProgrammingSession;
					Response_negative();
    39de:	8f e7       	ldi	r24, 0x7F	; 127
    39e0:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <UART_SEND_CHAR>
    39e4:	98 c0       	rjmp	.+304    	; 0x3b16 <Flash_MainTask+0x1a2>
			}break;
			
			case DOWNLOAD_REQUEST:
			{
				SET_BIT(PORTA,1);
				if (download_state==waiting_DownloadRequest && Req_len==3 )
    39e6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Req_len>
    39ea:	83 30       	cpi	r24, 0x03	; 3
    39ec:	c1 f7       	brne	.-16     	; 0x39de <Flash_MainTask+0x6a>
    39ee:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <Req_Data>
    39f2:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <Req_Data+0x1>
				{
					code_size=(Req_Data[0]<<8) | Req_Data[1];
    39f6:	80 81       	ld	r24, Z
    39f8:	91 81       	ldd	r25, Z+1	; 0x01
    39fa:	98 27       	eor	r25, r24
    39fc:	89 27       	eor	r24, r25
    39fe:	98 27       	eor	r25, r24
    3a00:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <code_size.2217+0x1>
    3a04:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <code_size.2217>
					//if (code_size < MAX_CODE_SIZE )
					//{
						Response_positive();
    3a08:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Req_ID>
    3a0c:	80 5c       	subi	r24, 0xC0	; 192
    3a0e:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <UART_SEND_CHAR>
						download_state=waiting_TransferData;
    3a12:	82 e0       	ldi	r24, 0x02	; 2
    3a14:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <download_state>
    3a18:	7e c0       	rjmp	.+252    	; 0x3b16 <Flash_MainTask+0x1a2>
					Response_negative();
				}
			}break;
			case TRANSFER_DATA:
			{
				SET_BIT(PORTA,2);
    3a1a:	da 9a       	sbi	0x1b, 2	; 27
				if (download_state==waiting_TransferData && Req_len == PAGE_SIZE+1)
    3a1c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <download_state>
    3a20:	82 30       	cpi	r24, 0x02	; 2
    3a22:	e1 f5       	brne	.+120    	; 0x3a9c <Flash_MainTask+0x128>
    3a24:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Req_len>
    3a28:	81 38       	cpi	r24, 0x81	; 129
    3a2a:	c1 f5       	brne	.+112    	; 0x3a9c <Flash_MainTask+0x128>
				{
					boot_program_page(page_number++,&Req_Data[0]);
    3a2c:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Req_Data>
    3a30:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <Req_Data+0x1>
    3a34:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <page_number.2216>
    3a38:	91 e0       	ldi	r25, 0x01	; 1
    3a3a:	98 0f       	add	r25, r24
    3a3c:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <page_number.2216>
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	0e 94 49 1c 	call	0x3892	; 0x3892 <boot_program_page>
					Response_positive();
    3a46:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Req_ID>
    3a4a:	80 5c       	subi	r24, 0xC0	; 192
    3a4c:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <UART_SEND_CHAR>
					recevied_code+=PAGE_SIZE;
    3a50:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <recevied_code.2218>
    3a54:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <recevied_code.2218+0x1>
    3a58:	80 58       	subi	r24, 0x80	; 128
    3a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a5c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <recevied_code.2218+0x1>
    3a60:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <recevied_code.2218>
					if (recevied_code>=code_size)
    3a64:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <code_size.2217>
    3a68:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <code_size.2217+0x1>
    3a6c:	82 17       	cp	r24, r18
    3a6e:	93 07       	cpc	r25, r19
    3a70:	08 f4       	brcc	.+2      	; 0x3a74 <Flash_MainTask+0x100>
    3a72:	51 c0       	rjmp	.+162    	; 0x3b16 <Flash_MainTask+0x1a2>
						download_state=waiting_TransferExit;
    3a74:	83 e0       	ldi	r24, 0x03	; 3
    3a76:	ce cf       	rjmp	.-100    	; 0x3a14 <Flash_MainTask+0xa0>
				}
			}break;
			
			case TRANSFER_EXIT:
			{
				SET_BIT(PORTA,3);
    3a78:	db 9a       	sbi	0x1b, 3	; 27
				if (download_state==waiting_TransferExit && Req_len==1)
    3a7a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <download_state>
    3a7e:	83 30       	cpi	r24, 0x03	; 3
    3a80:	69 f4       	brne	.+26     	; 0x3a9c <Flash_MainTask+0x128>
    3a82:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Req_len>
    3a86:	81 30       	cpi	r24, 0x01	; 1
    3a88:	49 f4       	brne	.+18     	; 0x3a9c <Flash_MainTask+0x128>
				{
					Response_positive();
    3a8a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Req_ID>
    3a8e:	80 5c       	subi	r24, 0xC0	; 192
    3a90:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <UART_SEND_CHAR>
					download_state=waiting_CheckCRC;
    3a94:	84 e0       	ldi	r24, 0x04	; 4
    3a96:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <download_state>
    3a9a:	3b c0       	rjmp	.+118    	; 0x3b12 <Flash_MainTask+0x19e>
				}
				else
				{
					download_state==waiting_ProgrammingSession;
					Response_negative();
    3a9c:	8f e7       	ldi	r24, 0x7F	; 127
    3a9e:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <UART_SEND_CHAR>
    3aa2:	37 c0       	rjmp	.+110    	; 0x3b12 <Flash_MainTask+0x19e>
				
			}break;
			
			case CHECK_CRC:
			{
				SET_BIT(PORTB,0);
    3aa4:	c0 9a       	sbi	0x18, 0	; 24
				uint16_t recevied_CRC;
				uint8_t is_valid;
				if (download_state==waiting_CheckCRC && Req_len==3)
    3aa6:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <download_state>
    3aaa:	84 30       	cpi	r24, 0x04	; 4
    3aac:	69 f5       	brne	.+90     	; 0x3b08 <Flash_MainTask+0x194>
    3aae:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Req_len>
    3ab2:	83 30       	cpi	r24, 0x03	; 3
    3ab4:	49 f5       	brne	.+82     	; 0x3b08 <Flash_MainTask+0x194>
    3ab6:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <Req_Data>
    3aba:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <Req_Data+0x1>
				{
					recevied_CRC=(Req_Data[0]<<8)|Req_Data[1];
					is_valid=CRC_CHECK_FLASH(0,code_size,recevied_CRC);
    3abe:	40 81       	ld	r20, Z
    3ac0:	51 81       	ldd	r21, Z+1	; 0x01
    3ac2:	54 27       	eor	r21, r20
    3ac4:	45 27       	eor	r20, r21
    3ac6:	54 27       	eor	r21, r20
    3ac8:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <code_size.2217>
    3acc:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <code_size.2217+0x1>
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	0e 94 93 1c 	call	0x3926	; 0x3926 <CRC_CHECK_FLASH>
					if (is_valid)
    3ad8:	88 23       	and	r24, r24
    3ada:	b1 f0       	breq	.+44     	; 0x3b08 <Flash_MainTask+0x194>
					{
						Response_positive();
    3adc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Req_ID>
    3ae0:	80 5c       	subi	r24, 0xC0	; 192
    3ae2:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <UART_SEND_CHAR>
						EEPROM_write(Code_VALID_ADDRESS,1);						
    3ae6:	61 e0       	ldi	r22, 0x01	; 1
    3ae8:	81 e0       	ldi	r24, 0x01	; 1
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <EEPROM_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3af0:	2f ef       	ldi	r18, 0xFF	; 255
    3af2:	80 e7       	ldi	r24, 0x70	; 112
    3af4:	92 e0       	ldi	r25, 0x02	; 2
    3af6:	21 50       	subi	r18, 0x01	; 1
    3af8:	80 40       	sbci	r24, 0x00	; 0
    3afa:	90 40       	sbci	r25, 0x00	; 0
    3afc:	e1 f7       	brne	.-8      	; 0x3af6 <Flash_MainTask+0x182>
    3afe:	00 c0       	rjmp	.+0      	; 0x3b00 <Flash_MainTask+0x18c>
    3b00:	00 00       	nop
						_delay_ms(100);
						asm("jmp 0");
    3b02:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
    3b06:	03 c0       	rjmp	.+6      	; 0x3b0e <Flash_MainTask+0x19a>
				download_state=waiting_ProgrammingSession;
				page_number=0;
			}break;
			default:
			{
				Response_negative();
    3b08:	8f e7       	ldi	r24, 0x7F	; 127
    3b0a:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <UART_SEND_CHAR>
				download_state = waiting_ProgrammingSession;
    3b0e:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <download_state>
				page_number=0;
    3b12:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <page_number.2216>
			}break;
		}
	}
	
	IS_REQUEST=False;
    3b16:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <IS_REQUEST>
    3b1a:	08 95       	ret

00003b1c <REQ_HANDLE>:
	}
	CLR_BIT(UCSRA ,RXC);
}
void REQ_HANDLE(void)
{
	PORTB|=2;
    3b1c:	c1 9a       	sbi	0x18, 1	; 24
	Req_ID=SESSION_CONTROL;
    3b1e:	80 e1       	ldi	r24, 0x10	; 16
    3b20:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Req_ID>
	Response_positive();
    3b24:	80 e5       	ldi	r24, 0x50	; 80
    3b26:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <UART_SEND_CHAR>
	download_state=waiting_DownloadRequest;
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <download_state>
    3b30:	08 95       	ret

00003b32 <Req_Notification>:
}
void Req_Notification(uint8_t * req , uint8_t len)
{
	//static unsigned short addr_x=0;
	IS_REQUEST=True;
    3b32:	21 e0       	ldi	r18, 0x01	; 1
    3b34:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <IS_REQUEST>
	Req_ID=req[0];
    3b38:	fc 01       	movw	r30, r24
    3b3a:	21 91       	ld	r18, Z+
    3b3c:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Req_ID>
	Req_len = len;
    3b40:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <Req_len>
	Req_Data = &req[1];
    3b44:	f0 93 68 00 	sts	0x0068, r31	; 0x800068 <Req_Data+0x1>
    3b48:	e0 93 67 00 	sts	0x0067, r30	; 0x800067 <Req_Data>
    3b4c:	08 95       	ret

00003b4e <RX_HANDLE>:
void RX_HANDLE(void)
{
	static uint8_t index=0;
	static uint8_t state =IDLE;
	//static unsigned short addr_x=10;
	uint8_t x = UART_RECIEVE8();
    3b4e:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <UART_RECIEVE8>
	//EEPROM_write(addr_x++,x);
	//EEPROM_write(addr_x++,download_state);
	if (state == IDLE)
    3b52:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <state.2278>
    3b56:	91 11       	cpse	r25, r1
    3b58:	06 c0       	rjmp	.+12     	; 0x3b66 <RX_HANDLE+0x18>
	{
		RX_LEN=x;
    3b5a:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <RX_LEN>
		state=BUSY;
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <state.2278>
    3b64:	16 c0       	rjmp	.+44     	; 0x3b92 <RX_HANDLE+0x44>
	}
	else
	{
		RxBuffer[index++]=x;
    3b66:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    3b6a:	61 e0       	ldi	r22, 0x01	; 1
    3b6c:	6e 0f       	add	r22, r30
    3b6e:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
    3b72:	f0 e0       	ldi	r31, 0x00	; 0
    3b74:	e4 59       	subi	r30, 0x94	; 148
    3b76:	ff 4f       	sbci	r31, 0xFF	; 255
    3b78:	80 83       	st	Z, r24
		if (index==RX_LEN)
    3b7a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <RX_LEN>
    3b7e:	68 13       	cpse	r22, r24
    3b80:	08 c0       	rjmp	.+16     	; 0x3b92 <RX_HANDLE+0x44>
		{
			index=0;
    3b82:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			state=IDLE;
    3b86:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <state.2278>
			Req_Notification(RxBuffer,RX_LEN);
    3b8a:	8c e6       	ldi	r24, 0x6C	; 108
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <Req_Notification>
		}
	}
	CLR_BIT(UCSRA ,RXC);
    3b92:	5f 98       	cbi	0x0b, 7	; 11
    3b94:	08 95       	ret

00003b96 <EEPROM_write>:
#include <avr/io.h>
#include "std_macros.h"
void EEPROM_write(unsigned short address, unsigned char data )
{
	/*set up address register*/
	EEARL=(char)address;
    3b96:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
    3b98:	9f bb       	out	0x1f, r25	; 31
	/*set up data register*/
	EEDR=data ;
    3b9a:	6d bb       	out	0x1d, r22	; 29
	/*write logical one to EEMWE*/
	SET_BIT(EECR,EEMWE);
    3b9c:	e2 9a       	sbi	0x1c, 2	; 28
	/*start EEPROM write by setting EEWE*/
	SET_BIT(EECR,EEWE);
    3b9e:	e1 9a       	sbi	0x1c, 1	; 28
	/* wait for completion of write operation*/
	while(READ_BIT(EECR,EEWE)==1);
    3ba0:	e1 99       	sbic	0x1c, 1	; 28
    3ba2:	fe cf       	rjmp	.-4      	; 0x3ba0 <EEPROM_write+0xa>
	
}
    3ba4:	08 95       	ret

00003ba6 <EEPROM_read>:
char EEPROM_read( unsigned short address )
{
	/*set up address register*/
	EEARL=(char)address;
    3ba6:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
    3ba8:	9f bb       	out	0x1f, r25	; 31
	/*start EEPROM read by setting EERE*/
	SET_BIT(EECR,EERE);
    3baa:	e0 9a       	sbi	0x1c, 0	; 28
	/*return data from data register*/
	return EEDR ;
    3bac:	8d b3       	in	r24, 0x1d	; 29
    3bae:	08 95       	ret

00003bb0 <main>:

//static uint8_t RX_LEN;
//static uint8_t RxBuffer[255];

int main(void)
{
    3bb0:	cf 93       	push	r28
    3bb2:	df 93       	push	r29
    /* Replace with your application code */
	int8_t valid_app,valid_req;
	DDRA=0XFF;DDRB=0xff;
    3bb4:	8f ef       	ldi	r24, 0xFF	; 255
    3bb6:	8a bb       	out	0x1a, r24	; 26
    3bb8:	87 bb       	out	0x17, r24	; 23
	valid_app=(int8_t)EEPROM_read(Code_VALID_ADDRESS);
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <EEPROM_read>
    3bc2:	d8 2f       	mov	r29, r24
	valid_req=(int8_t)EEPROM_read(Req_VALID_ADDRESS);
    3bc4:	82 e0       	ldi	r24, 0x02	; 2
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <EEPROM_read>
    3bcc:	c8 2f       	mov	r28, r24
	
	if ( (valid_app!=1) || (valid_req==1) )
    3bce:	d1 30       	cpi	r29, 0x01	; 1
    3bd0:	11 f4       	brne	.+4      	; 0x3bd6 <main+0x26>
    3bd2:	81 30       	cpi	r24, 0x01	; 1
    3bd4:	91 f4       	brne	.+36     	; 0x3bfa <main+0x4a>
	{
		UART_Vinit(9600);	
    3bd6:	80 e8       	ldi	r24, 0x80	; 128
    3bd8:	95 e2       	ldi	r25, 0x25	; 37
    3bda:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <UART_Vinit>
		if(valid_req==1)
    3bde:	c1 30       	cpi	r28, 0x01	; 1
    3be0:	39 f4       	brne	.+14     	; 0x3bf0 <main+0x40>
		{
			EEPROM_write(Req_VALID_ADDRESS,0);
    3be2:	60 e0       	ldi	r22, 0x00	; 0
    3be4:	82 e0       	ldi	r24, 0x02	; 2
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <EEPROM_write>
			REQ_HANDLE();
    3bec:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <REQ_HANDLE>
		}
		while(1)
		{
			RX_HANDLE();
    3bf0:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <RX_HANDLE>
			Flash_MainTask();
    3bf4:	0e 94 ba 1c 	call	0x3974	; 0x3974 <Flash_MainTask>
    3bf8:	fb cf       	rjmp	.-10     	; 0x3bf0 <main+0x40>
		}
	}
	else asm("jmp 0");
    3bfa:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
}
    3bfe:	80 e0       	ldi	r24, 0x00	; 0
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	df 91       	pop	r29
    3c04:	cf 91       	pop	r28
    3c06:	08 95       	ret

00003c08 <UART_Vinit>:
	{
		UART_SEND_CHAR(*DATA);
		DATA++;
		_delay_ms(2);
	}
}
    3c08:	88 98       	cbi	0x11, 0	; 17
    3c0a:	89 9a       	sbi	0x11, 1	; 17
    3c0c:	9c 01       	movw	r18, r24
    3c0e:	40 e0       	ldi	r20, 0x00	; 0
    3c10:	50 e0       	ldi	r21, 0x00	; 0
    3c12:	60 e2       	ldi	r22, 0x20	; 32
    3c14:	71 ea       	ldi	r23, 0xA1	; 161
    3c16:	87 e0       	ldi	r24, 0x07	; 7
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__udivmodsi4>
    3c1e:	21 50       	subi	r18, 0x01	; 1
    3c20:	31 09       	sbc	r19, r1
    3c22:	30 bd       	out	0x20, r19	; 32
    3c24:	29 b9       	out	0x09, r18	; 9
    3c26:	54 9a       	sbi	0x0a, 4	; 10
    3c28:	53 9a       	sbi	0x0a, 3	; 10
    3c2a:	86 e8       	ldi	r24, 0x86	; 134
    3c2c:	80 bd       	out	0x20, r24	; 32
    3c2e:	08 95       	ret

00003c30 <UART_SEND_CHAR>:
    3c30:	5d 9b       	sbis	0x0b, 5	; 11
    3c32:	fe cf       	rjmp	.-4      	; 0x3c30 <UART_SEND_CHAR>
    3c34:	8c b9       	out	0x0c, r24	; 12
    3c36:	08 95       	ret

00003c38 <UART_RECIEVE8>:


char UART_RECIEVE8()
{	
	while( READ_BIT(UCSRA ,RXC) ==0);
    3c38:	5f 9b       	sbis	0x0b, 7	; 11
    3c3a:	fe cf       	rjmp	.-4      	; 0x3c38 <UART_RECIEVE8>
	return (char)UDR;
    3c3c:	8c b1       	in	r24, 0x0c	; 12
}
    3c3e:	08 95       	ret

00003c40 <__udivmodsi4>:
    3c40:	a1 e2       	ldi	r26, 0x21	; 33
    3c42:	1a 2e       	mov	r1, r26
    3c44:	aa 1b       	sub	r26, r26
    3c46:	bb 1b       	sub	r27, r27
    3c48:	fd 01       	movw	r30, r26
    3c4a:	0d c0       	rjmp	.+26     	; 0x3c66 <__udivmodsi4_ep>

00003c4c <__udivmodsi4_loop>:
    3c4c:	aa 1f       	adc	r26, r26
    3c4e:	bb 1f       	adc	r27, r27
    3c50:	ee 1f       	adc	r30, r30
    3c52:	ff 1f       	adc	r31, r31
    3c54:	a2 17       	cp	r26, r18
    3c56:	b3 07       	cpc	r27, r19
    3c58:	e4 07       	cpc	r30, r20
    3c5a:	f5 07       	cpc	r31, r21
    3c5c:	20 f0       	brcs	.+8      	; 0x3c66 <__udivmodsi4_ep>
    3c5e:	a2 1b       	sub	r26, r18
    3c60:	b3 0b       	sbc	r27, r19
    3c62:	e4 0b       	sbc	r30, r20
    3c64:	f5 0b       	sbc	r31, r21

00003c66 <__udivmodsi4_ep>:
    3c66:	66 1f       	adc	r22, r22
    3c68:	77 1f       	adc	r23, r23
    3c6a:	88 1f       	adc	r24, r24
    3c6c:	99 1f       	adc	r25, r25
    3c6e:	1a 94       	dec	r1
    3c70:	69 f7       	brne	.-38     	; 0x3c4c <__udivmodsi4_loop>
    3c72:	60 95       	com	r22
    3c74:	70 95       	com	r23
    3c76:	80 95       	com	r24
    3c78:	90 95       	com	r25
    3c7a:	9b 01       	movw	r18, r22
    3c7c:	ac 01       	movw	r20, r24
    3c7e:	bd 01       	movw	r22, r26
    3c80:	cf 01       	movw	r24, r30
    3c82:	08 95       	ret

00003c84 <_exit>:
    3c84:	f8 94       	cli

00003c86 <__stop_program>:
    3c86:	ff cf       	rjmp	.-2      	; 0x3c86 <__stop_program>
